Ext.data.JsonP.global({"uses":[],"subclasses":[],"superclasses":[],"component":false,"tagname":"class","meta":{},"requires":[],"mixedInto":[],"html":"<div><div class='doc-contents'><p>Global variables and functions.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='global'>global</span><br/><a href='source/EmployeeStore.html#global-property-' target='_blank' class='view-source'>view source</a></div><a href='#!/api/global-property-' class='name not-expandable'></a><span> : Object</span></div><div class='description'><div class='short'><p>Contains the list of employee domain objects.</p>\n</div><div class='long'><p>Contains the list of employee domain objects.</p>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getInjectableLogger' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='global'>global</span><br/><a href='source/Logger.html#global-method-getInjectableLogger' target='_blank' class='view-source'>view source</a></div><a href='#!/api/global-method-getInjectableLogger' class='name expandable'>getInjectableLogger</a>( <span class='pre'></span> ) : {fn: Function, singleton: boolean}</div><div class='description'><div class='short'>Returns an object of the logger as a factory so it can be injected into client objects. ...</div><div class='long'><p>Returns an object of the logger as a factory so it can be injected into client objects. The factory is used\nso we can use the reference to the instance of the object it's injected into, thus allowing log messages\nto take the following format:</p>\n\n<p>16:11:45:956 DEBUG [<a href=\"#!/api/CafeTownsend.controller.AuthenticationController\" rel=\"CafeTownsend.controller.AuthenticationController\" class=\"docClass\">CafeTownsend.controller.AuthenticationController</a>] - login: username = a, password = a</p>\n\n<p>The use of the singleton property of the returned object ensures that the logger is unique and created\nfor each injection, again allowing the logger to gain a reference to the instance it's injected into.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>{fn: Function, singleton: boolean}</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-getLogger' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='global'>global</span><br/><a href='source/Logger.html#global-method-getLogger' target='_blank' class='view-source'>view source</a></div><a href='#!/api/global-method-getLogger' class='name expandable'>getLogger</a>( <span class='pre'>name</span> ) : *</div><div class='description'><div class='short'>Creates a log4JavaScript logger that outputs the following format:\n\n16:11:45:956 DEBUG [CafeTownsend.controller.Authe...</div><div class='long'><p>Creates a log4JavaScript logger that outputs the following format:</p>\n\n<p>16:11:45:956 DEBUG [<a href=\"#!/api/CafeTownsend.controller.AuthenticationController\" rel=\"CafeTownsend.controller.AuthenticationController\" class=\"docClass\">CafeTownsend.controller.AuthenticationController</a>] - login: username = a, password = a</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The string name used for the logger. This is often the class name of the object the\nlogger is used in.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>*</span><div class='sub-desc'><p>A log4JavaScript logger.</p>\n</div></li></ul></div></div></div></div></div></div></div>","parentMixins":[],"files":[{"href":"","filename":""}],"members":{"cfg":[],"css_var":[],"property":[{"meta":{},"tagname":"property","owner":"global","name":"","id":"property-"}],"method":[{"meta":{},"tagname":"method","owner":"global","name":"getInjectableLogger","id":"method-getInjectableLogger"},{"meta":{},"tagname":"method","owner":"global","name":"getLogger","id":"method-getLogger"}],"event":[],"css_mixin":[]},"mixins":[],"statics":{"cfg":[],"css_var":[],"property":[],"method":[],"event":[],"css_mixin":[]},"name":"global","html_meta":{},"alternateClassNames":[],"aliases":{}});